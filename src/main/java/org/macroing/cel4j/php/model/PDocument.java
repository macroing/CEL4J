/**
 * Copyright 2009 - 2020 J&#246;rgen Lundgren
 * 
 * This file is part of org.macroing.cel4j.
 * 
 * org.macroing.cel4j is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * org.macroing.cel4j is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with org.macroing.cel4j. If not, see <http://www.gnu.org/licenses/>.
 */
package org.macroing.cel4j.php.model;

import java.lang.reflect.Field;//TODO: Add Javadocs!
import java.io.File;
import java.io.IOException;
import java.io.UncheckedIOException;
import java.nio.file.Files;
import java.nio.file.StandardOpenOption;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

import org.macroing.cel4j.util.Document;

//TODO: Add Javadocs!
public final class PDocument {
	private final List<PClass> classes;
	private final List<PInterface> interfaces;
	private final List<String> uses;
	private final PBlock block;
	private String namespace;
	private boolean isGeneratingComment;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	
//	TODO: Add Javadocs!
	public PDocument() {
		this.classes = new ArrayList<>();
		this.interfaces = new ArrayList<>();
		this.uses = new ArrayList<>();
		this.block = new PBlock();
		this.namespace = "";
		this.isGeneratingComment = false;
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	
//	TODO: Add Javadocs!
	public Document write() {
		return write(new Document());
	}
	
//	TODO: Add Javadocs!
	public Document write(final Document document) {
		return write(document, false);
	}
	
//	TODO: Add Javadocs!
	public Document write(final Document document, final boolean isAligningConsts) {
		final List<PClass> classes = getClasses();
		final List<PInterface> interfaces = getInterfaces();
		final List<String> uses = getUses();
		
		final PBlock block = getBlock();
		
		final boolean hasBlockLines = !block.isEmpty();
		final boolean hasClasses = classes.size() > 0;
		final boolean hasInterfaces = interfaces.size() > 0;
		
		final boolean isGeneratingComment = isGeneratingComment();
		
		final String namespace = getNamespace();
		
		document.line("<?php");
		document.indent();
		
		if(isGeneratingComment) {
			document.linef("/**");
			document.linef(" * The PHP source code was generated by CEL4J PHP at %s.", LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")));
			document.linef(" */");
			document.linef("");
		}
		
		if(!namespace.isEmpty()) {
			document.linef("namespace %s;", namespace);
			document.linef("");
		}
		
		if(!uses.isEmpty()) {
			for(int i = 0; i < uses.size(); i++) {
				final String useA = uses.get(i);
				final String useB = uses.get(i + 1 < uses.size() ? i + 1 : i);
				
				document.linef("use %s;", useA);
				
				final String[] useAParts = useA.split("\\\\");
				final String[] useBParts = useB.split("\\\\");
				
				if(useAParts.length > 0 && useBParts.length > 0 && !useAParts[0].equals(useBParts[0])) {
					document.line();
				}
			}
			
			document.line();
		}
		
		for(int i = 0; i < interfaces.size(); i++) {
			final PInterface interfaceA = interfaces.get(i);
			final PInterface interfaceB = interfaces.get(i + 1 < interfaces.size() ? i + 1 : i);
			
			interfaceA.write(document);
			
			if(interfaceA != interfaceB) {
				document.line();
				document.line("////////////////////////////////////////////////////////////////////////////////////////////////////");
				document.line();
			}
		}
		
		if((hasClasses || hasBlockLines) && hasInterfaces) {
			document.line();
			document.line("////////////////////////////////////////////////////////////////////////////////////////////////////");
			document.line();
		}
		
		for(int i = 0; i < classes.size(); i++) {
			final PClass classA = classes.get(i);
			final PClass classB = classes.get(i + 1 < classes.size() ? i + 1 : i);
			
			classA.write(document, isAligningConsts);
			
			if(classA != classB) {
				document.line();
				document.line("////////////////////////////////////////////////////////////////////////////////////////////////////");
				document.line();
			}
		}
		
		if(hasClasses && hasBlockLines) {
			document.line();
			document.line("////////////////////////////////////////////////////////////////////////////////////////////////////");
			document.line();
		}
		
		block.write(document);
		
		return document;
	}
	
//	TODO: Add Javadocs!
	public Document write(final File file) {
		return write(file, false);
	}
	
//	TODO: Add Javadocs!
	public Document write(final File file, final boolean isAligningPConsts) {
		try {
			final Document document = write(new Document(), isAligningPConsts);
			
			file.getParentFile().mkdirs();
			
			Files.write(file.toPath(), document.toString().getBytes("UTF-8"), StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING, StandardOpenOption.WRITE);
			
			return document;
		} catch(final IOException e) {
			throw new UncheckedIOException(e);
		}
	}
	
//	TODO: Add Javadocs!
	public List<PClass> getClasses() {
		return new ArrayList<>(this.classes);
	}
	
//	TODO: Add Javadocs!
	public List<PInterface> getInterfaces() {
		return new ArrayList<>(this.interfaces);
	}
	
//	TODO: Add Javadocs!
	public List<String> getUses() {
		return new ArrayList<>(this.uses);
	}
	
//	TODO: Add Javadocs!
	public PBlock getBlock() {
		return this.block;
	}
	
//	TODO: Add Javadocs!
	public String getNamespace() {
		return this.namespace;
	}
	
//	TODO: Add Javadocs!
	public boolean isGeneratingComment() {
		return this.isGeneratingComment;
	}
	
//	TODO: Add Javadocs!
	public void addClass(final PClass pClass) {
		this.classes.add(Objects.requireNonNull(pClass, "pClass == null"));
	}
	
//	TODO: Add Javadocs!
	public void addInterface(final PInterface pInterface) {
		this.interfaces.add(Objects.requireNonNull(pInterface, "pInterface == null"));
	}
	
//	TODO: Add Javadocs!
	public void addUse(final String use) {
		this.uses.add(Objects.requireNonNull(use, "use == null"));
	}
	
//	TODO: Add Javadocs!
	public void removeClass(final PClass pClass) {
		this.classes.remove(Objects.requireNonNull(pClass, "pClass == null"));
	}
	
//	TODO: Add Javadocs!
	public void removeInterface(final PInterface pInterface) {
		this.interfaces.remove(Objects.requireNonNull(pInterface, "pInterface == null"));
	}
	
//	TODO: Add Javadocs!
	public void removeUse(final String use) {
		this.uses.remove(Objects.requireNonNull(use, "use == null"));
	}
	
//	TODO: Add Javadocs!
	public void setGeneratingComment(final boolean isGeneratingComment) {
		this.isGeneratingComment = isGeneratingComment;
	}
	
//	TODO: Add Javadocs!
	public void setNamespace(final String namespace) {
		this.namespace = Objects.requireNonNull(namespace, "namespace == null");
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	
//	TODO: Add Javadocs!
	public static String toNamespace(final String... names) {
		return Arrays.asList(names).stream().filter(name -> !name.isEmpty()).collect(Collectors.joining("\\"));
	}
}